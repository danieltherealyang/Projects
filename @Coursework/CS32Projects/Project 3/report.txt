Daniel Yang
ID: 205772799
(Problem 1)
"Actor.h"
class Actor
    virtual void doSomething() = 0;
        All actors need to run this function during each game tick but no Actor object will be created directly.
        Therefore, this function was defined as pure virtual since it will only needs to be defined for derived
        classes and not for the Actor class itself.
    virtual void bonk() = 0;
        All actors need to run this function during each game tick but no Actor object will be created directly.
        This function was defined as pure virtual so that derived classes can all be bonked but not the Actor
        class since all actors created will be instances of classes derived from Actor.
    bool doesOverlap(int x, int y)
        This function is the same for all actors since all actor sprite bounds are the same, so this function
        was defined in the Actor base class so there wouldn't be redundant functions.
    void setAlive(bool alive) {m_alive = alive;}
        This function was defined because all actors need to set their alive status in the same way.
    bool getAlive() {return m_alive;}
        This function was defined because all actors need to check if they are in the alive state.
    bool getDamageable() {return m_damageable;}
        This function was defined because all actors need to check if they are damageable.
    bool doesBlock() {return m_doesBlock;}
        This function was defined because all actors need to check if they block movement.
    virtual void damage() {};
        This function was defined here because all actors need to take damage even if they are not damageable
        since that makes it easier to loop throughout all of the actors and keep them all in one data structure
        rather than splitting damageable and non-damageable actors. This was defined to be virtual since
        each Actor takes damage in a different way but in the case that the derived class doesn't define the
        function it does nothing, which is the case for non-damageable actors.
    StudentWorld* getWorld() {return m_gameWorld;}
        This function was defined here so that all derived classes could have a common way to interact with the
        StudentWorld object, since they need to interact with the other Actors stored in that StudentWorld object.

class Damageable
    virtual void damage() = 0;
        This function was inherited from Actor but was redefined to be pure virtual so that all derived classes
        of this Damageable class would have to define their own damage functions because Actors derived from this
        class must take damage and the function given in the Actor base class does nothing.

class Fireable
    int getRecharge() {return m_rechargeTicks;}
        This function was defined because all actors that fire projectiles need to check how long they have
        before they can fire again.
    void setRecharge(int ticks) {m_rechargeTicks = ticks;}
        This function was defined because all actors that fire projectiles need to reset their recharge timers.
    void decrementRecharge() {m_rechargeTicks--;}
        This function was defined because all actors that fire projectiles need to decrement their recharge timers
        after each game tick.

class Peach
    void doSomething();
        This function was defined because Peach does something different than other actors each game tick.
    void bonk();
        This function was defined because Peach performs a unique action when bonked different from other actors.
    void damage();
        This function was defined because Peach is a damageable actor and needs to specify what action to take
        when damaged.
    void setHealth(int health) {m_health = health;}
        This function was defined because Peach has hitpoints and needs a way to increase or decrease them.
    void giveStar(int ticks);
        This function was defined because Peach can have a Star powerup and needs a way to set the member variable
        that keeps track of whether she has the powerup.
    void giveJump();
        This function was defined because Peach can be given a Jump powerup and needs a way to set the member
        variable that keeps track of whether she has the powerup.
    void giveShoot();
        This function was defined because Peach can be given a Shoot powerup and needs a way to set the member
        variable that keeps track of whether she has the powerup.
    bool hasStar() {return m_starPower;}
        This function was defined because other Actors need to check whether Peach has the star powerup so they
        can decide how to act.
    bool hasJump() {return m_jumpPower;}
        This function was defined because other Actors need to check whether Peach has the jump powerup so they
        can decide how to act.
    bool hasShoot() {return m_shootPower;}
        This function was defined because other Actors need to check whether Peach has the shoot powerup so they
        can decide how to act.

class Block, Pipe, Flag, Mario, Flower, Mushroom, Star, Piranha_Fireball, Peach_Fireball, Shell
    void doSomething();
        Each of these actors performs a different action each game tick, so this function inherited from the Actor
        class was defined here.
    void bonk();
        Each of these actors performs a different action when bonked, so this function inherited from the Actor class
        was defined here.

class Goomba, Koopa, Piranha
    void doSomething();
        This function was defined because these damageable actors perform different actions during each game tick,
        so the pure virtual function from the Actor base class needs to be defined here.
    void damage();
        This function was defined because all damageable actors need a way to be notified that they are damaged
        and they perform different actions upon being damaged.
    void bonk();
        This function was defined here because all damageable actors need to be bonked and each actor performs
        a different action when bonked.

"StudentWorld.h"
StudentWorld class:
    virtual int init(); //initializes each level: game start, new level, restart level
        Defined here because the StudentWorld class needs to initialize levels. Virtual because the skeleton
        defined this function as virtual.
    virtual int move(); //20x per second, updating game actors, introduce new actors, delete actors
        Defined here because this class needs to update and manage all of the actors in the game. Virtual
        because the skeleton defined the function as virtual.
    virtual void cleanUp(); //current level or loses a life, free all actors, 
        Defined here because this class needs to delete all of the Actor objects to prevent a memory leak.
        Virtual because the skeleton defined the function as virtual.
    void addPeach(int x, int y) {m_Peach = new Peach(x, y, this);} //x and y take in pixel coords
        Defined here because the class needs a way to add a Peach actor. This functionality is in a separate
        function from other actors because Peach is stored separately from other actors.

    template <typename T>
    void add(int x, int y) {actors.push_front(new T(x, y, this));}
        Defined here as a template because most Actors are initialized in the same format, with their constructor
        parameters being identical.
    template <typename T>
    void add(int x, int y, int dir) {actors.push_front(new T(x, y, dir, this));}
        Defined here because some of the Actors need a direction parameter in addition to coordinates but their
        constructors have the parameters in an identical order.
    void addBlock(int x, int y, string goodie) {actors.push_front(new Block(x, y, goodie, this));};
        Defined here because blocks have a unique goodie parameter to initialize the object which is different
        from all other actors.

    Peach* getPeach() {return m_Peach;}
        Defined because all actors need a way to get the peach object stored in the game world.

    bool notBlocked(int x, int y, Actor*& object); //x and y are pixel coords
        Defined here because all actors need to check if a target x and y coordinate is blocked by a movement
        blocking actor. Sets the object reference parameter so that the caller can interact with the blocking
        actor.
    bool notBlocked(int x, int y);
        Defined here because all actors need to check if a target x and y coordinate is blocked by a movement
        blocking actor.
    bool notBlockedDamageable(int x, int y, Actor*& object);
        Defined here because all actors need to check if they overlap with a damageable actor at a particular
        coordinate. Sets the object reference parameter so that the caller can interact with the damageable
        actor they overlap with.
    bool notBlockedDamageable(int x, int y);
        Defined here because all actors need to check if they overlap with a damageable actor at a particular
        coordinate.
    void bonkOverlap(int x, int y);
        Defined here so that actors can bonk all overlapping actors whether or not they block movement or are
        damageable.

    void finishLevel() {m_finishedLevel = true;}
        Defined here so that actors can notify the game world that the level was finished.
    void gameOver() {m_gameOver = true;}
        Defined here so that actors can notify the game world that the game has completed.

(Problem 2)
I managed to implement all functionality as far as I know.

(Problem 3)
It was not specified how exactly to check whether Koopa, Goomba, or Piranha were being bonked by peach so I
initially used a friend class Peach statement and made bonk private so only peach could call bonk for those
classes but I didn't know if the friend keyword was allowed. So, I changed the functions to check if the
actors were overlapping with peach and only perform the action if that was the case otherwise do nothing.
Another design decision I made was to have the add<Actor> template function in StudentWorld push_front
instead of push_back in the data structure storing the actors. This was because if koopa got damaged and the
shell was added to the end of the list, the doSomething function for the shell would see that it overlapped
with a koopa which would then call the koopa's damage function and cause an infinite loop. By storing the
newly created shell in the front, the iterator in the StudentWorld move() would not call the shell's doSomething()
in the same iteration as the koopa getting damaged.